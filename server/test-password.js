const bcrypt = require('bcryptjs');

async function testPassword() {
  const password = '6ba13ccf0e63b4b1fcf4b1e5485803ed';
  const hash = '$2a$12$y10x60/GCOASJxrl4eDJeeAhpv5aeOuI2Knc3Yujd05D464SDuHzm';
  
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...');
  console.log(`–ü–∞—Ä–æ–ª—å: ${password}`);
  console.log(`–•–µ—à: ${hash}`);
  
  const isValid = await bcrypt.compare(password, hash);
  console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${isValid ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π' : '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π'}`);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ö–µ—à –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const newHash = await bcrypt.hash(password, 12);
  console.log(`–ù–æ–≤—ã–π —Ö–µ—à: ${newHash}`);
  
  const isValidNew = await bcrypt.compare(password, newHash);
  console.log(`–ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${isValidNew ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π' : '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π'}`);
}

testPassword();
