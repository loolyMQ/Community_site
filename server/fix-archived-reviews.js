const { PrismaClient } = require('./src/generated/prisma');

const prisma = new PrismaClient();

async function fixArchivedReviews() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã...');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∞—Ä—Ö–∏–≤–µ
    const archivedReviews = await prisma.review.findMany({
      where: {
        isVerified: true,
        isPublished: true,
        isActive: true,
        isArchived: true
      }
    });
    
    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${archivedReviews.length} –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤`);
    
    if (archivedReviews.length > 0) {
      // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –∞—Ä—Ö–∏–≤–∞ —Å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
      const updatedReviews = await prisma.review.updateMany({
        where: {
          isVerified: true,
          isPublished: true,
          isActive: true,
          isArchived: true
        },
        data: {
          isArchived: false
        }
      });
      
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${updatedReviews.count} –æ—Ç–∑—ã–≤–æ–≤`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const activeReviews = await prisma.review.findMany({
      where: {
        isVerified: true,
        isPublished: true,
        isActive: true,
        isArchived: false
      }
    });
    
    console.log(`üìä –¢–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: ${activeReviews.length}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixArchivedReviews();
