import * as bcrypt from 'bcrypt';
import * as fs from 'fs';
import * as path from 'path';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
function generateComplexPassword(): string {
  const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:,.<>?';
  let password = '';
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª–∏–Ω–æ–π 20 —Å–∏–º–≤–æ–ª–æ–≤
  for (let i = 0; i < 20; i++) {
    password += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  
  return password;
}

async function updatePasswords() {
  try {
    console.log('üîê Updating admin and moderator passwords...');

    // –ß–∏—Ç–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const dataPath = path.join(__dirname, '../data-export.json');
    const data = JSON.parse(fs.readFileSync(dataPath, 'utf8'));

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤, –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É–¥–∞–ª—è–µ–º
    let updatedCount = 0;
    const filteredUsers: any[] = [];
    const credentials: { email: string; password: string; role: string }[] = [];
    
    for (const user of data.users) {
      if (user.role === 'ADMIN') {
        const password = generateComplexPassword();
        const hashedPassword = await bcrypt.hash(password, 12);
        
        console.log(`üëë Updating admin: ${user.name} (${user.email})`);
        user.password = hashedPassword;
        user.email = 'admin@community-site.ru';
        user.name = '–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
        filteredUsers.push(user);
        credentials.push({ email: user.email, password, role: 'Admin' });
        updatedCount++;
      } else if (user.role === 'MODERATOR') {
        const password = generateComplexPassword();
        const hashedPassword = await bcrypt.hash(password, 12);
        
        console.log(`üõ°Ô∏è Updating moderator: ${user.name} (${user.email})`);
        user.password = hashedPassword;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
        if (user.name.includes('0001')) {
          user.email = 'moderator1@community-site.ru';
          user.name = '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä 1';
        } else if (user.name.includes('0002')) {
          user.email = 'moderator2@community-site.ru';
          user.name = '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä 2';
        } else if (user.name.includes('0003')) {
          user.email = 'moderator3@community-site.ru';
          user.name = '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä 3';
        } else if (user.name.includes('0004')) {
          user.email = 'moderator4@community-site.ru';
          user.name = '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä 4';
        }
        
        filteredUsers.push(user);
        credentials.push({ email: user.email, password, role: 'Moderator' });
        updatedCount++;
      }
      // LEADER –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–¥–∞–ª—è–µ–º
    }

    // –ó–∞–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    data.users = filteredUsers;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const updatedDataPath = path.join(__dirname, '../data-export-updated.json');
    fs.writeFileSync(updatedDataPath, JSON.stringify(data, null, 2));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
    const credentialsPath = path.join(__dirname, '../credentials.txt');
    const credentialsText = credentials.map(cred => 
      `${cred.role}: ${cred.email} / ${cred.password}`
    ).join('\n');
    fs.writeFileSync(credentialsPath, credentialsText);

    console.log(`‚úÖ Updated ${updatedCount} users (removed ${data.users.length - updatedCount} leaders)`);
    console.log(`üìÅ Updated data saved to: ${updatedDataPath}`);
    console.log(`üîë Credentials saved to: ${credentialsPath}`);
    console.log('\nüîë New credentials:');
    credentials.forEach(cred => {
      console.log(`   ${cred.role}: ${cred.email} / ${cred.password}`);
    });

  } catch (error) {
    console.error('‚ùå Error updating passwords:', error);
  }
}

updatePasswords();
