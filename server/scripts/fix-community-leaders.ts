import * as fs from 'fs';
import * as path from 'path';

async function fixCommunityLeaders() {
  try {
    console.log('üîß Fixing community leaders...');

    // –ß–∏—Ç–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const dataPath = path.join(__dirname, '../data-export-updated.json');
    const data = JSON.parse(fs.readFileSync(dataPath, 'utf8'));

    // –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∞ (–±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –∫–∞–∫ –ª–∏–¥–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    const adminUser = data.users.find((user: any) => user.role === 'ADMIN');
    if (!adminUser) {
      throw new Error('Admin user not found!');
    }

    console.log(`üëë Using admin as default leader: ${adminUser.name} (${adminUser.id})`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –∞–¥–º–∏–Ω–∞ –∫–∞–∫ –ª–∏–¥–µ—Ä–∞
    let updatedCount = 0;
    data.communities = data.communities.map((community: any) => {
      console.log(`üè¢ Updating community: ${community.name} (leader: ${community.leaderId} -> ${adminUser.id})`);
      community.leaderId = adminUser.id;
      updatedCount++;
      return community;
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const fixedDataPath = path.join(__dirname, '../data-export-fixed.json');
    fs.writeFileSync(fixedDataPath, JSON.stringify(data, null, 2));

    console.log(`‚úÖ Fixed ${updatedCount} communities`);
    console.log(`üìÅ Fixed data saved to: ${fixedDataPath}`);

  } catch (error) {
    console.error('‚ùå Error fixing community leaders:', error);
  }
}

fixCommunityLeaders();
