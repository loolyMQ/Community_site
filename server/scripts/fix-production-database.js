const { PrismaClient } = require('../src/generated/prisma');

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL || 'postgresql://postgres:gmQCecJtIUrawaRnzfPFGtvCLcuHgfUH@metro.proxy.rlwy.net:17580/railway'
    }
  }
});

async function fixProductionDatabase() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏ –≤ –ø–æ–ª–µ phone
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ phone...');
    const phoneResult = await prisma.community.updateMany({
      where: {
        OR: [
          { phone: null },
          { phone: [] }
        ]
      },
      data: {
        phone: []
      }
    });
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π phone: ${phoneResult.count}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏ –≤ –ø–æ–ª–µ telegram
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ telegram...');
    const telegramResult = await prisma.community.updateMany({
      where: {
        OR: [
          { telegram: null },
          { telegram: [] }
        ]
      },
      data: {
        telegram: []
      }
    });
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π telegram: ${telegramResult.count}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏ –≤ –ø–æ–ª–µ vk
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ vk...');
    const vkResult = await prisma.community.updateMany({
      where: {
        OR: [
          { vk: null },
          { vk: [] }
        ]
      },
      data: {
        vk: []
      }
    });
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π vk: ${vkResult.count}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏ –≤ –ø–æ–ª–µ website
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ website...');
    const websiteResult = await prisma.community.updateMany({
      where: {
        OR: [
          { website: null },
          { website: [] }
        ]
      },
      data: {
        website: []
      }
    });
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π website: ${websiteResult.count}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    const communities = await prisma.community.findMany({
      include: {
        categories: {
          include: {
            category: true
          }
        },
        leader: true
      }
    });
    
    console.log(`‚úÖ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ: ${communities.length}`);
    communities.forEach(c => {
      console.log(`  - ${c.name} (ID: ${c.id})`);
      console.log(`    –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${c.categories.length}`);
      console.log(`    –ö–æ–Ω—Ç–∞–∫—Ç—ã: telegram=${c.telegram?.length || 0}, vk=${c.vk?.length || 0}, website=${c.website?.length || 0}, phone=${c.phone?.length || 0}`);
    });
    
    console.log('üéâ –ü—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixProductionDatabase();
