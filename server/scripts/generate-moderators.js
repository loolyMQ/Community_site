const bcrypt = require('bcryptjs');
const crypto = require('crypto');

async function generateModerators() {
  try {
    console.log('üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤...\n');
    
    const moderators = [];
    
    for (let i = 1; i <= 4; i++) {
      const email = `moderator#${String(i).padStart(4, '0')}@community.mephi.ru`;
      const password = crypto.randomBytes(16).toString('hex');
      const saltRounds = 12;
      const passwordHash = await bcrypt.hash(password, saltRounds);
      
      moderators.push({
        email,
        password,
        passwordHash,
        role: 'MODERATOR'
      });
    }
    
    console.log('üìù –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:\n');
    console.log('=== –ú–û–î–ï–†–ê–¢–û–†–´ ===');
    
    moderators.forEach((mod, index) => {
      console.log(`\n--- –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä ${index + 1} ---`);
      console.log(`Email: ${mod.email}`);
      console.log(`–ü–∞—Ä–æ–ª—å: ${mod.password}`);
      console.log(`–†–æ–ª—å: ${mod.role}`);
    });
    
    console.log('\nüìã SQL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:');
    console.log('\n-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É User');
    moderators.forEach((mod) => {
      console.log(`INSERT INTO "User" (id, email, password_hash, role, name, "createdAt", "updatedAt") VALUES ('moderator-${Date.now()}-${Math.random().toString(36).substr(2, 9)}', '${mod.email}', '${mod.passwordHash}', 'MODERATOR', '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä ${mod.email.split('#')[1].split('@')[0]}', NOW(), NOW());`);
    });
    
    console.log('\n‚ö†Ô∏è  –í–ê–ñ–ù–û:');
    console.log('1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ!');
    console.log('2. –î–æ–±–∞–≤—å—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Prisma Studio –∏–ª–∏ SQL');
    console.log('3. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∫–æ–º–º–∏—Ç—å—Ç–µ –ø–∞—Ä–æ–ª–∏ –≤ git!');
    console.log('4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

generateModerators();
