const { PrismaClient } = require('../src/generated/prisma');

// –î–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL || 'postgresql://artemvedernikov:password@localhost:5432/communities'
    }
  }
});

async function addStudentTeamsCategoryProduction() {
  try {
    console.log('üöÄ –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ –æ—Ç—Ä—è–¥—ã" –≤ –ø—Ä–æ–¥–∞–∫—à–Ω...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    const existingCategory = await prisma.category.findFirst({
      where: {
        name: '–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ –æ—Ç—Ä—è–¥—ã'
      }
    });

    if (existingCategory) {
      console.log('‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ –æ—Ç—Ä—è–¥—ã" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ');
      console.log(`üìä ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${existingCategory.id}`);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const newCategory = await prisma.category.create({
      data: {
        name: '–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ –æ—Ç—Ä—è–¥—ã',
        description: '',
        icon: 'üöÄ',
        color: '#E74C3C',
        sortOrder: 11,
        isActive: true
      }
    });

    console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ –æ—Ç—Ä—è–¥—ã" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ!`);
    console.log(`üìä ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${newCategory.id}`);
    console.log(`üé® –¶–≤–µ—Ç: ${newCategory.color}`);
    console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: "${newCategory.description}"`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

addStudentTeamsCategoryProduction();
