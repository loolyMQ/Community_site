const bcrypt = require('bcryptjs');
const crypto = require('crypto');

async function generateSecureAdmin() {
  try {
    console.log('üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∞–¥–º–∏–Ω —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å
    const password = crypto.randomBytes(16).toString('hex');
    console.log(`üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: ${password}\n`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è
    const saltRounds = 12;
    const passwordHash = await bcrypt.hash(password, saltRounds);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Å–µ–∫—Ä–µ—Ç—ã
    const jwtSecret = crypto.randomBytes(64).toString('hex');
    const jwtRefreshSecret = crypto.randomBytes(64).toString('hex');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π email
    const adminEmail = `admin_${crypto.randomBytes(8).toString('hex')}@mephi.local`;
    
    console.log('üìù –î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –≤–∞—à .env —Ñ–∞–π–ª:\n');
    console.log('=== –ê–î–ú–ò–ù –£–ß–ï–¢–ù–´–ï –î–ê–ù–ù–´–ï ===');
    console.log(`ADMIN_EMAIL=${adminEmail}`);
    console.log(`ADMIN_PASSWORD_HASH=${passwordHash}`);
    console.log('');
    console.log('=== JWT –°–ï–ö–†–ï–¢–´ ===');
    console.log(`JWT_SECRET=${jwtSecret}`);
    console.log(`JWT_REFRESH_SECRET=${jwtRefreshSecret}`);
    console.log('');
    console.log('=== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===');
    console.log('JWT_EXPIRES_IN=15m');
    console.log('JWT_REFRESH_EXPIRES_IN=7d');
    console.log('MAX_LOGIN_ATTEMPTS=3');
    console.log('LOCKOUT_DURATION=1800000');
    console.log('RATE_LIMIT_MAX_REQUESTS=100');
    console.log('');
    console.log('‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ!');
    console.log('‚ö†Ô∏è  –í–ê–ñ–ù–û: –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∫–æ–º–º–∏—Ç—å—Ç–µ .env —Ñ–∞–π–ª –≤ git!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

generateSecureAdmin();
