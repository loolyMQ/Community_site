import { PrismaClient } from '@prisma/client';
import * as fs from 'fs';
import * as path from 'path';

const prisma = new PrismaClient();

async function initDatabase() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // 1. –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log('üìä –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ Prisma...');
    try {
      const { execSync } = require('child_process');
      execSync('npx prisma migrate deploy', { stdio: 'inherit' });
    } catch (error) {
      console.log('‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∞:', error.message);
    }

    // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma Client
    console.log('üîß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma Client...');
    try {
      const { execSync } = require('child_process');
      execSync('npx prisma generate', { stdio: 'inherit' });
    } catch (error) {
      console.log('‚ö†Ô∏è Prisma Client —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞:', error.message);
    }

    // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...');
    const existingCommunities = await prisma.community.count();
    if (existingCommunities > 0) {
      console.log(`‚úÖ –í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å ${existingCommunities} —Å–æ–æ–±—â–µ—Å—Ç–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É.`);
      return;
    }

    console.log('üå± –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö...');
    
    // –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
    const csvPath = path.join(__dirname, '../../communities_data.csv');
    const csvContent = fs.readFileSync(csvPath, 'utf-8');
    
    // –ü–∞—Ä—Å–∏–º CSV
    const lines = csvContent.split('\n').slice(1); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const communities = [];

    for (const line of lines) {
      if (!line.trim()) continue;
      
      // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ CSV
      const columns = line.split(',').map(col => col.trim().replace(/^"|"$/g, ''));
      
      if (columns.length >= 6) {
        communities.push({
          category: columns[0],
          name: columns[1],
          description: columns[2],
          leaderContacts: columns[3],
          socialLinks: columns[4],
          comments: columns[5]
        });
      }
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${communities.length} —Å–æ–æ–±—â–µ—Å—Ç–≤`);

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = [...new Set(communities.map(c => c.category))];
    const categoryMap = new Map();

    for (const categoryName of categories) {
      if (!categoryName || categoryName === '?' || categoryName === '(—Ç–æ–ª—å–∫–æ) –°–µ–∫—Ü–∏—è') continue;
      
      const category = await prisma.category.upsert({
        where: { name: categoryName },
        update: {},
        create: {
          name: categoryName,
          description: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}`,
          isActive: true,
          sortOrder: 0
        }
      });
      
      categoryMap.set(categoryName, category.id);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}`);
    }

    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
    for (const communityData of communities) {
      if (!communityData.name || communityData.name === '?') continue;

      // –°–æ–∑–¥–∞–µ–º –ª–∏–¥–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã)
      let leaderId = null;
      if (communityData.leaderContacts && communityData.leaderContacts !== '?' && communityData.leaderContacts !== '–û–õ–ï–ì –°–î–ï–õ–ê–ï–¢, –ú–´ –í –ù–ï–ì–û –í–ï–†–ò–ú ') {
        const leader = await prisma.user.upsert({
          where: { email: `leader_${communityData.name.toLowerCase().replace(/\s+/g, '_')}@mephi.local` },
          update: {},
          create: {
            name: `–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å ${communityData.name}`,
            email: `leader_${communityData.name.toLowerCase().replace(/\s+/g, '_')}@mephi.local`,
            password: 'temp_password_123',
            role: 'STUDENT',
            isActive: true
          }
        });
        leaderId = leader.id;
      }

      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
      const community = await prisma.community.upsert({
        where: { name: communityData.name },
        update: {},
        create: {
          name: communityData.name,
          description: communityData.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
          shortDescription: (communityData.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç').substring(0, 100) + '...',
          leaderId,
          isActive: true
        }
      });

      // –°–≤—è–∑—ã–≤–∞–µ–º —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
      if (communityData.category && categoryMap.has(communityData.category)) {
        await prisma.communityCategory.upsert({
          where: {
            communityId_categoryId: {
              communityId: community.id,
              categoryId: categoryMap.get(communityData.category)
            }
          },
          update: {},
          create: {
            communityId: community.id,
            categoryId: categoryMap.get(communityData.category),
            isMain: true
          }
        });
      }

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ: ${communityData.name}`);
    }

    console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

initDatabase();
