import { Request, Response } from 'express';
import jwt from 'jsonwebtoken';
import bcrypt from 'bcryptjs';
import { validationResult } from 'express-validator';
import { prisma } from '../config/database';

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
const loginAttempts = new Map<string, { count: number; lastAttempt: number; lockedUntil?: number }>();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–æ–≤
const generateTokens = (user: { id: string; email: string; role: string }) => {
  const jwtSecret = process.env['JWT_SECRET'];
  const jwtRefreshSecret = process.env['JWT_REFRESH_SECRET'];
  
  if (!jwtSecret || !jwtRefreshSecret) {
    throw new Error('JWT secrets not configured');
  }

  const accessToken = jwt.sign(
    { 
      userId: user.id, 
      email: user.email, 
      role: user.role,
      iat: Math.floor(Date.now() / 1000)
    },
    jwtSecret,
    { expiresIn: process.env['JWT_EXPIRES_IN'] || '15m' }
  );

  const refreshToken = jwt.sign(
    { 
      userId: user.id, 
      email: user.email,
      iat: Math.floor(Date.now() / 1000)
    },
    jwtRefreshSecret,
    { expiresIn: process.env['JWT_REFRESH_EXPIRES_IN'] || '7d' }
  );

  return { accessToken, refreshToken };
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP
const checkIpLockout = (ip: string): boolean => {
  const attempts = loginAttempts.get(ip);
  if (!attempts) return false;

  const maxAttempts = parseInt(process.env['MAX_LOGIN_ATTEMPTS'] || '5');
  const lockoutDuration = parseInt(process.env['LOCKOUT_DURATION'] || '900000');

  if (attempts.count >= maxAttempts) {
    if (attempts.lockedUntil && Date.now() < attempts.lockedUntil) {
      return true; // IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    } else {
      // –°–±—Ä–æ—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      loginAttempts.delete(ip);
      return false;
    }
  }

  return false;
};

// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
const incrementLoginAttempts = (ip: string): void => {
  const attempts = loginAttempts.get(ip) || { count: 0, lastAttempt: 0 };
  attempts.count++;
  attempts.lastAttempt = Date.now();

  const maxAttempts = parseInt(process.env['MAX_LOGIN_ATTEMPTS'] || '5');
  const lockoutDuration = parseInt(process.env['LOCKOUT_DURATION'] || '900000');

  if (attempts.count >= maxAttempts) {
    attempts.lockedUntil = Date.now() + lockoutDuration;
  }

  loginAttempts.set(ip, attempts);
};

// –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
const resetLoginAttempts = (ip: string): void => {
  loginAttempts.delete(ip);
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
const logSecurityEvent = (event: string, details: any): void => {
  console.log(`üîí SECURITY: ${event}`, {
    timestamp: new Date().toISOString(),
    ...details
  });
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const checkAdminCredentials = async (email: string, password: string): Promise<boolean> => {
  const adminEmail = process.env['ADMIN_EMAIL'];
  const adminHash = process.env['ADMIN_PASSWORD_HASH'];
  const moderatorEmail = process.env['MODERATOR_EMAIL'];
  const moderatorHash = process.env['MODERATOR_PASSWORD_HASH'];

  if (email === adminEmail && adminHash) {
    return await bcrypt.compare(password, adminHash);
  }

  if (email === moderatorEmail && moderatorHash) {
    return await bcrypt.compare(password, moderatorHash);
  }

  return false;
};

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const register = async (req: Request, res: Response): Promise<void> => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      res.status(400).json({
        success: false,
        message: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        errors: errors.array()
      });
      return;
    }

    const { name, email, password, role = 'STUDENT' } = req.body;

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (password.length < 8) {
      res.status(400).json({
        success: false,
        message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤'
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    const existingUser = await prisma.user.findUnique({
      where: { email }
    });
    
    if (existingUser) {
      res.status(400).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      });
      return;
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–∞—É–Ω–¥–æ–≤
    const bcryptRounds = parseInt(process.env['BCRYPT_ROUNDS'] || '14');
    const hashedPassword = await bcrypt.hash(password, bcryptRounds);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.create({
      data: {
        name: name.trim(),
        email: email.toLowerCase().trim(),
        password: hashedPassword,
        role
      }
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
    const { accessToken, refreshToken } = generateTokens({
      id: user.id,
      email: user.email || '',
      role: user.role
    });

    logSecurityEvent('USER_REGISTERED', {
      userId: user.id,
      email: user.email,
      role: user.role,
      ip: req.ip
    });

    res.status(201).json({
      success: true,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
      data: {
        user: {
          id: user.id,
          name: user.name,
          email: user.email,
          role: user.role
        },
        accessToken,
        refreshToken
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    logSecurityEvent('REGISTRATION_ERROR', {
      error: error instanceof Error ? error.message : 'Unknown error',
      ip: req.ip
    });
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
    });
  }
};

// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const login = async (req: Request, res: Response): Promise<void> => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      res.status(400).json({
        success: false,
        message: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        errors: errors.array()
      });
      return;
    }

    const { email, password } = req.body;
    const clientIp = req.ip || req.connection.remoteAddress || 'unknown';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É IP
    if (checkIpLockout(clientIp)) {
      logSecurityEvent('LOGIN_BLOCKED_IP', {
        ip: clientIp,
        reason: 'Too many failed attempts'
      });
      res.status(429).json({
        success: false,
        message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      });
      return;
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const isAdminLogin = await checkAdminCredentials(email, password);
    if (isAdminLogin) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å
      const adminEmail = process.env['ADMIN_EMAIL'];
      const moderatorEmail = process.env['MODERATOR_EMAIL'];
      const role = email === adminEmail ? 'ADMIN' : 'MODERATOR';
      const name = email === adminEmail ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –°–∏—Å—Ç–µ–º—ã' : '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –°—Ç—É–¥—Å–æ–≤–µ—Ç–∞';

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
      resetLoginAttempts(clientIp);

      // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞
      const adminUser = {
        id: `admin-${Date.now()}`,
        email,
        name,
        role
      };

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
      const { accessToken, refreshToken } = generateTokens(adminUser);

      logSecurityEvent('ADMIN_LOGIN_SUCCESS', {
        email: adminUser.email,
        role: adminUser.role,
        ip: clientIp
      });

      res.json({
        success: true,
        message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
        data: {
          user: adminUser,
          accessToken,
          refreshToken
        }
      });
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const user = await prisma.user.findUnique({
      where: { email: email.toLowerCase().trim() }
    });
    
    if (!user) {
      incrementLoginAttempts(clientIp);
      logSecurityEvent('LOGIN_FAILED', {
        email: email,
        ip: clientIp,
        reason: 'User not found'
      });
      res.status(401).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!user.isActive) {
      incrementLoginAttempts(clientIp);
      logSecurityEvent('LOGIN_FAILED', {
        userId: user.id,
        email: user.email,
        ip: clientIp,
        reason: 'Account deactivated'
      });
      res.status(401).json({
        success: false,
        message: '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isValidPassword = await bcrypt.compare(password, user.password);
    if (!isValidPassword) {
      incrementLoginAttempts(clientIp);
      logSecurityEvent('LOGIN_FAILED', {
        userId: user.id,
        email: user.email,
        ip: clientIp,
        reason: 'Invalid password'
      });
      res.status(401).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
      });
      return;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
    resetLoginAttempts(clientIp);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    await prisma.user.update({
      where: { id: user.id },
      data: { lastLogin: new Date() }
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
    const { accessToken, refreshToken } = generateTokens({
      id: user.id,
      email: user.email || '',
      role: user.role
    });

    logSecurityEvent('LOGIN_SUCCESS', {
      userId: user.id,
      email: user.email,
      role: user.role,
      ip: clientIp
    });

    res.json({
      success: true,
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
      data: {
        user: {
          id: user.id,
          name: user.name,
          email: user.email,
          role: user.role
        },
        accessToken,
        refreshToken
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    logSecurityEvent('LOGIN_ERROR', {
      error: error instanceof Error ? error.message : 'Unknown error',
      ip: req.ip
    });
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ'
    });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
export const refreshToken = async (req: Request, res: Response): Promise<void> => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      res.status(400).json({
        success: false,
        message: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        errors: errors.array()
      });
      return;
    }

    const { refreshToken: token } = req.body;
    const jwtRefreshSecret = process.env['JWT_REFRESH_SECRET'];

    if (!jwtRefreshSecret) {
      throw new Error('JWT_REFRESH_SECRET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    const decoded = jwt.verify(token, jwtRefreshSecret) as any;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { id: decoded.userId },
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        isActive: true
      }
    });

    if (!user || !user.isActive) {
      res.status(401).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
      });
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
    const { accessToken, refreshToken: newRefreshToken } = generateTokens({
      id: user.id,
      email: user.email || '',
      role: user.role
    });

    logSecurityEvent('TOKEN_REFRESHED', {
      userId: user.id,
      email: user.email,
      ip: req.ip
    });

    res.json({
      success: true,
      message: '–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω',
      data: {
        accessToken,
        refreshToken: newRefreshToken
      }
    });
  } catch (error) {
    if (error instanceof jwt.JsonWebTokenError) {
      logSecurityEvent('TOKEN_REFRESH_FAILED', {
        reason: 'Invalid token',
        ip: req.ip
      });
      res.status(401).json({
        success: false,
        message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'
      });
    } else if (error instanceof jwt.TokenExpiredError) {
      logSecurityEvent('TOKEN_REFRESH_FAILED', {
        reason: 'Token expired',
        ip: req.ip
      });
      res.status(401).json({
        success: false,
        message: '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫'
      });
    } else {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞'
      });
    }
  }
};

// –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const logout = async (_req: Request, res: Response): Promise<void> => {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    logSecurityEvent('USER_LOGOUT', {
      ip: _req.ip
    });
    
    res.json({
      success: true,
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ'
    });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getProfile = async (req: Request, res: Response): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'
      });
      return;
    }

    const user = await prisma.user.findUnique({
      where: { id: req.user.userId },
      select: {
        id: true,
        name: true,
        email: true,
        role: true,
        avatar: true,
        studentId: true,
        faculty: true,
        course: true,
        group: true,
        bio: true,
        isActive: true,
        isVerified: true,
        lastLogin: true,
        createdAt: true
      }
    });

    if (!user) {
      res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
      return;
    }

    res.json({
      success: true,
      data: { user }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è'
    });
  }
};
