// üè† –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å home.mephi
// –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ENABLE_HOME_MEPHI_INTEGRATION = true

const ENABLE_HOME_MEPHI_INTEGRATION = false; // üö´ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –û–¢–ö–õ–Æ–ß–ï–ù–ê

export interface HomeMephiUser {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  middleName?: string;
  faculty?: string;
  course?: number;
  group?: string;
  studentId?: string;
}

export interface HomeMephiAuthResponse {
  success: boolean;
  user?: HomeMephiUser;
  error?: string;
}

class HomeMephiService {
  private baseUrl = 'https://home.mephi.ru/api'; // –ó–∞–≥–ª—É—à–∫–∞ URL
  private isEnabled = ENABLE_HOME_MEPHI_INTEGRATION;

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å home.mephi
   */
  isIntegrationEnabled(): boolean {
    return this.isEnabled;
  }

  /**
   * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ home.mephi
   * @param credentials - —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async authenticate(credentials: { email: string; password: string }): Promise<HomeMephiAuthResponse> {
    if (!this.isEnabled) {
      // –ó–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      return this.getMockUser(credentials.email);
    }

    try {
      // TODO: –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å home.mephi
      const response = await fetch(`${this.baseUrl}/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(credentials),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      }

      const data = await response.json();
      return {
        success: true,
        user: data.user,
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å home.mephi:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ home.mephi',
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ —Ç–æ–∫–µ–Ω—É
   * @param token - —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
   */
  async getUserInfo(token: string): Promise<HomeMephiAuthResponse> {
    if (!this.isEnabled) {
      // –ó–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      return this.getMockUser('test@mephi.ru');
    }

    try {
      // TODO: –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å home.mephi
      const response = await fetch(`${this.baseUrl}/user/profile`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }

      const data = await response.json();
      return {
        success: true,
        user: data.user,
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      };
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ home.mephi
   * @param token - —Ç–æ–∫–µ–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  async validateToken(token: string): Promise<boolean> {
    if (!this.isEnabled) {
      // –ó–∞–≥–ª—É—à–∫–∞ - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
      return true;
    }

    try {
      // TODO: –†–µ–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
      const response = await fetch(`${this.baseUrl}/auth/validate`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      });

      return response.ok;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
      return false;
    }
  }

  /**
   * –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private getMockUser(email: string): HomeMephiAuthResponse {
    const mockUsers: Record<string, HomeMephiUser> = {
      'test@mephi.ru': {
        id: 'mock-user-1',
        email: 'test@mephi.ru',
        firstName: '–ò–≤–∞–Ω',
        lastName: '–ò–≤–∞–Ω–æ–≤',
        middleName: '–ò–≤–∞–Ω–æ–≤–∏—á',
        faculty: '–ò–Ω—Å—Ç–∏—Ç—É—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫–∏–±–µ—Ä–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º',
        course: 3,
        group: '–ò–ö–ë–û-01-21',
        studentId: '12345678',
      },
      'student@mephi.ru': {
        id: 'mock-user-2',
        email: 'student@mephi.ru',
        firstName: '–ú–∞—Ä–∏—è',
        lastName: '–ü–µ—Ç—Ä–æ–≤–∞',
        middleName: '–°–µ—Ä–≥–µ–µ–≤–Ω–∞',
        faculty: '–ò–Ω—Å—Ç–∏—Ç—É—Ç —è–¥–µ—Ä–Ω–æ–π —Ñ–∏–∑–∏–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
        course: 2,
        group: '–Ø–§–ë–û-02-22',
        studentId: '87654321',
      },
    };

    const user = mockUsers[email] || {
      id: 'mock-user-default',
      email: email,
      firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
      lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      middleName: '–¢–µ—Å—Ç–æ–≤–∏—á',
      faculty: '–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç',
      course: 1,
      group: '–¢–ï–°–¢-01-23',
      studentId: '00000000',
    };

    return {
      success: true,
      user,
    };
  }

  /**
   * –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
   */
  toggleIntegration(): void {
    this.isEnabled = !this.isEnabled;
    console.log(`üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å home.mephi ${this.isEnabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
   */
  getIntegrationStatus(): { enabled: boolean; baseUrl: string } {
    return {
      enabled: this.isEnabled,
      baseUrl: this.baseUrl,
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const homeMephiService = new HomeMephiService();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è
export { ENABLE_HOME_MEPHI_INTEGRATION };

// üöÄ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:
// homeMephiService.toggleIntegration() - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
// homeMephiService.getIntegrationStatus() - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å
// ENABLE_HOME_MEPHI_INTEGRATION = true - –≤–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –Ω–∞–≤—Å–µ–≥–¥–∞
