import React, { useState, useEffect } from 'react';
import { homeMephiService, ENABLE_HOME_MEPHI_INTEGRATION } from '../services/homeMephiService';

interface AddReviewFormProps {
  communityId: string;
  onSubmit: (reviewData: ReviewFormData) => void;
  onCancel: () => void;
}

interface ReviewFormData {
  rating: number;
  title?: string;
  content: string;
  isAnonymous: boolean;
  // üè† –ü–æ–ª—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å home.mephi
  homeMephiUserId?: string;
  homeMephiFirstName?: string;
  homeMephiLastName?: string;
  homeMephiMiddleName?: string;
  homeMephiFaculty?: string;
  homeMephiCourse?: number;
  homeMephiGroup?: string;
  homeMephiStudentId?: string;
}

const AddReviewForm: React.FC<AddReviewFormProps> = ({ onSubmit, onCancel }) => {
  const [formData, setFormData] = useState<ReviewFormData>({
    rating: 5,
    title: '',
    content: '',
    isAnonymous: false
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [homeMephiUser, setHomeMephiUser] = useState<any>(null);
  const [showHomeMephiInfo, setShowHomeMephiInfo] = useState(false);

  // üè† –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ home.mephi (–∑–∞–≥–ª—É—à–∫–∞)
  useEffect(() => {
    const loadHomeMephiUser = async () => {
      if (ENABLE_HOME_MEPHI_INTEGRATION) {
        try {
          // TODO: –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å home.mephi
          const mockUser = await homeMephiService.getUserInfo('mock-token');
          if (mockUser.success && mockUser.user) {
            setHomeMephiUser(mockUser.user);
            setShowHomeMephiInfo(true);
          }
        } catch (error) {
          console.log('Home.mephi –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error);
        }
      }
    };

    loadHomeMephiUser();
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.content.trim()) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤');
      return;
    }

    if (formData.content.trim().length < 10) {
      setError('–û—Ç–∑—ã–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      // üè† –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ home.mephi –∫ —Ñ–æ—Ä–º–µ
      const reviewDataWithHomeMephi = {
        ...formData,
        ...(homeMephiUser && {
          homeMephiUserId: homeMephiUser.id,
          homeMephiFirstName: homeMephiUser.firstName,
          homeMephiLastName: homeMephiUser.lastName,
          homeMephiMiddleName: homeMephiUser.middleName,
          homeMephiFaculty: homeMephiUser.faculty,
          homeMephiCourse: homeMephiUser.course,
          homeMephiGroup: homeMephiUser.group,
          homeMephiStudentId: homeMephiUser.studentId,
        })
      };

      await onSubmit(reviewDataWithHomeMephi);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞');
    } finally {
      setLoading(false);
    }
  };

  const renderStars = (rating: number) => {
    return (
      <div className="flex gap-1">
        {[1, 2, 3, 4, 5].map((star) => (
          <button
            key={star}
            type="button"
            onClick={() => setFormData(prev => ({ ...prev, rating: star }))}
            className="text-2xl cursor-pointer transition-colors"
            style={{ 
              color: star <= rating ? '#4a9eff' : '#666666',
              fontSize: '24px'
            }}
          >
            ‚òÖ
          </button>
        ))}
      </div>
    );
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="form-group">
        <label className="form-label">–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞</label>
        <div className="flex items-center gap-2">
          {renderStars(formData.rating)}
          <span className="text-sm text-gray-400 ml-2">
            {formData.rating}/5
          </span>
        </div>
      </div>

      <div className="form-group">
        <label className="form-label">–ó–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
        <input
          type="text"
          className="form-input"
          value={formData.title}
          onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
          placeholder="–ö—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–∑—ã–≤–∞..."
          maxLength={100}
        />
      </div>

      <div className="form-group">
        <label className="form-label">–í–∞—à –æ—Ç–∑—ã–≤</label>
        <textarea
          className="form-textarea"
          value={formData.content}
          onChange={(e) => setFormData(prev => ({ ...prev, content: e.target.value }))}
          placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Å —ç—Ç–∏–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º..."
          required
          minLength={10}
          maxLength={1000}
          rows={4}
        />
        <div className="text-xs text-gray-400 mt-1">
          {formData.content.length}/1000 —Å–∏–º–≤–æ–ª–æ–≤
        </div>
      </div>

      {/* üè† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ home.mephi –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ */}
      {showHomeMephiInfo && homeMephiUser && (
        <div className="form-group">
          <div className="bg-blue-900/20 border border-blue-500/30 rounded p-3">
            <div className="text-sm text-blue-300 mb-2">
              üè† –î–∞–Ω–Ω—ã–µ –∏–∑ home.mephi:
            </div>
            <div className="text-xs text-gray-400 space-y-1">
              <div>{homeMephiUser.firstName} {homeMephiUser.lastName} {homeMephiUser.middleName}</div>
              {homeMephiUser.faculty && <div>–§–∞–∫—É–ª—å—Ç–µ—Ç: {homeMephiUser.faculty}</div>}
              {homeMephiUser.course && <div>–ö—É—Ä—Å: {homeMephiUser.course}</div>}
              {homeMephiUser.group && <div>–ì—Ä—É–ø–ø–∞: {homeMephiUser.group}</div>}
            </div>
          </div>
        </div>
      )}

      <div className="form-group">
        <label className="flex items-center gap-2 cursor-pointer">
          <input
            type="checkbox"
            checked={formData.isAnonymous}
            onChange={(e) => setFormData(prev => ({ ...prev, isAnonymous: e.target.checked }))}
            className="w-4 h-4"
          />
          <span className="text-sm text-gray-300">
            –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∞–Ω–æ–Ω–∏–º–Ω–æ
            {showHomeMephiInfo && (
              <span className="text-xs text-gray-500 ml-1">
                (–≤ –∞–¥–º–∏–Ω–∫–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤–∞—à–µ –∏–º—è)
              </span>
            )}
          </span>
        </label>
        {formData.isAnonymous && showHomeMephiInfo && (
          <div className="text-xs text-yellow-400 mt-1">
            ‚ö†Ô∏è –û—Ç–∑—ã–≤ –±—É–¥–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–≤–∏–¥—è—Ç –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è
          </div>
        )}
      </div>

      {error && (
        <div className="text-red-400 text-sm bg-red-900/20 border border-red-500/30 rounded p-2">
          {error}
        </div>
      )}

      <div className="flex gap-8">
        <button 
          type="submit" 
          className="button primary"
          disabled={loading}
        >
          {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'}
        </button>
        <button 
          type="button" 
          className="button"
          onClick={onCancel}
          disabled={loading}
        >
          –û—Ç–º–µ–Ω–∞
        </button>
      </div>
    </form>
  );
};

export default AddReviewForm; 