import React, { useMemo } from 'react';
import { 
  collaborationRequests, 
  updateCollaborationRequestStatus,
  addCollaborationRequestComment,
  archiveCollaborationRequest
} from '../data/adminData';
import { communities } from '../data/communities';

interface AdminCollaborationsProps {
  currentUser: { id: string; name: string; role: string } | null;
  onDataUpdate?: () => void;
}

const AdminCollaborations: React.FC<AdminCollaborationsProps> = ({ currentUser, onDataUpdate }) => {
  const FEATURE_REQUESTS = import.meta.env.VITE_FEATURE_REQUESTS === 'true';
  const hidden = useMemo(() => !FEATURE_REQUESTS, [FEATURE_REQUESTS]);

  const filteredRequests = requests.filter(request => {
    // –°–Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
    const statusMatch = filterStatus === 'all' || request.status === filterStatus;
    // –ó–∞—Ç–µ–º –∏—Å–∫–ª—é—á–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
    return statusMatch && !request.isArchived;
  });

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞—è–≤–∫–∏ –ø–æ –¥–∞—Ç–µ
  const sortedRequests = [...filteredRequests].sort((a, b) => {
    const dateA = new Date(a.createdAt).getTime();
    const dateB = new Date(b.createdAt).getTime();
    return sortOrder === 'newest' ? dateB - dateA : dateA - dateB;
  });

  const handleUpdateStatus = (requestId: string, status: 'approved' | 'rejected') => {
    if (currentUser) {
      updateCollaborationRequestStatus(requestId, status, currentUser.id);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      setRequests([...collaborationRequests]);
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
      if (onDataUpdate) {
        onDataUpdate();
      }
    }
  };

  const handleAddComment = (requestId: string) => {
    if (currentUser && adminComment.trim()) {
      addCollaborationRequestComment(requestId, adminComment.trim(), currentUser.id);
      setRequests([...collaborationRequests]);
      setCommentingRequest(null);
      setAdminComment('');
      if (onDataUpdate) {
        onDataUpdate();
      }
    }
  };

  const handleArchive = (requestId: string) => {
    archiveCollaborationRequest(requestId);
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    setRequests([...collaborationRequests]);
    if (onDataUpdate) {
      onDataUpdate();
    }
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  React.useEffect(() => {
    setRequests([...collaborationRequests]);
  }, []);

  const getCommunityName = (communityId: string) => {
    const community = communities.find(c => c.id === communityId);
    return community?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ';
  };

  const getContactDisplay = (contact: string) => {
    if (contact.startsWith('@')) {
      return `üì± ${contact}`;
    } else if (contact.includes('vk.com')) {
      return `üí¨ ${contact}`;
    } else if (contact.includes('@')) {
      return `üìß ${contact}`;
    } else {
      return `üìû ${contact}`;
    }
  };

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      pending: { text: '–û–∂–∏–¥–∞–µ—Ç', class: 'pending' },
      approved: { text: '–û–¥–æ–±—Ä–µ–Ω–æ', class: 'approved' },
      rejected: { text: '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ', class: 'rejected' }
    };
    
    const config = statusConfig[status as keyof typeof statusConfig];
    return (
      <span className={`status-badge ${config.class}`}>
        {config.text}
      </span>
    );
  };

  return (
    <div className="admin-collaborations">
      <div className="admin-section-header">
        <h2>–ó–∞—è–≤–∫–∏ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ</h2>
        {hidden && <div className="text-sm text-gray-400">–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã—Ç–∞</div>}
      </div>

      {!hidden && (
      <div className="collaborations-table">
        <table>
          <thead>
            <tr>
              <th>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è</th>
              <th>–°–æ–æ–±—â–µ—Å—Ç–≤–æ</th>
              <th>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</th>
              <th>–ö–æ–Ω—Ç–∞–∫—Ç—ã</th>
              <th>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∞</th>
              <th>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏</th>
              <th>–°—Ç–∞—Ç—É—Å</th>
              <th>–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody>
            {sortedRequests.map(request => (
              <tr key={request.id}>
                <td>
                  <div className="organization-info">
                    <div className="organization-name">{request.name}</div>
                  </div>
                </td>
                <td>
                  <div className="community-info">
                    {getCommunityName(request.communityId)}
                  </div>
                </td>
                <td>
                  <div className="description-cell">
                    {request.description}
                  </div>
                </td>
                <td>
                  <div className="contact-cell">
                    {getContactDisplay(request.contact)}
                  </div>
                </td>
                <td>
                  <div className="admin-comment-cell">
                    {request.adminComment || '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω'}
                  </div>
                </td>
                <td>
                  <div className="date-cell">
                    {new Date(request.createdAt).toLocaleDateString('ru-RU')}
                  </div>
                </td>
                <td>
                  {getStatusBadge(request.status)}
                </td>
                <td>
                  <div className="action-buttons">
                    {request.status === 'pending' ? (
                      <>
                        <button 
                          className="action-btn approve"
                          onClick={() => handleUpdateStatus(request.id, 'approved')}
                          title="–û–¥–æ–±—Ä–∏—Ç—å"
                        >
                          ‚úÖ
                        </button>
                        <button 
                          className="action-btn reject"
                          onClick={() => handleUpdateStatus(request.id, 'rejected')}
                          title="–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
                        >
                          ‚ùå
                        </button>
                      </>
                    ) : (
                      <div className="processed-info">
                        {request.processedAt && (
                          <div className="processed-date">
                            –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {new Date(request.processedAt).toLocaleDateString('ru-RU')}
                          </div>
                        )}
                      </div>
                    )}
                    
                    <button 
                      className="action-btn comment"
                      onClick={() => setCommentingRequest(commentingRequest === request.id ? null : request.id)}
                      title="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
                    >
                      üí¨
                    </button>
                    
                    <button 
                      className="action-btn archive"
                      onClick={() => handleArchive(request.id)}
                      title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤"
                    >
                      üì¶
                    </button>
                  </div>
                  
                  {commentingRequest === request.id && (
                    <div className="comment-form">
                      <textarea
                        value={adminComment}
                        onChange={(e) => setAdminComment(e.target.value)}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞..."
                        className="form-textarea"
                        style={{ marginTop: '8px', width: '100%' }}
                      />
                      <div style={{ marginTop: '8px', display: 'flex', gap: '8px' }}>
                        <button 
                          className="button primary"
                          onClick={() => handleAddComment(request.id)}
                          style={{ fontSize: '12px', padding: '4px 8px' }}
                        >
                          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                        </button>
                        <button 
                          className="button"
                          onClick={() => {
                            setCommentingRequest(null);
                            setAdminComment('');
                          }}
                          style={{ fontSize: '12px', padding: '4px 8px' }}
                        >
                          –û—Ç–º–µ–Ω–∞
                        </button>
                      </div>
                    </div>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      )}

      {!hidden && sortedRequests.length === 0 && (
        <div className="no-data">
          <p>–ó–∞—è–≤–∫–∏ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
        </div>
      )}
    </div>
  );
};

export default AdminCollaborations; 